LENGUAJE COMPILADOR: 
    TOMA UNA SECUENCIA DE CARACTERES Y LOS CONVIERTE EN OTRA COSA.
    ES COMO UN TRADUCTOR TOMA UNA UN LENGUAJE COMO INGLES A CASTELLANO.

    CODIGO FUENTE -> [AQUI TRABAJA EL COMPILADOR] -> CODIGO FINAL
        (VA LEYENDO LOS CARACTERES = ANALIZADOR LEXICO)

- FASE ANALIZADOR LEXICO:

    VAR VARIABLE = 10;

    V -> LETRA V
    A -> LETRA A
    R -> LETRA R
    = -> SIMBOLO IGUAL
    1 -> NUMERO
    0 -> NUMERO
    ; -> PUNTO Y COMA

    LEE EL CODIGO LETRA POR LETRA Y VA ANALIZANDO EN EL MOMENTO.

    VAR -> "PALABRA RESERVADA VAR" (IF, WHILE, DO, STATIC)
    VARIABLE -> "ES UN IDENTIFICADOR"
    = -> "SIMBOLO_ASIGNACION"
    10 -> "NUMERO_ENTERO"

- FASE: ANALISIS SINTACTICO -> SYNTAX ERROR/ERROR SYNTAX.
CUANDO HACEMOS UN IF EL ANALIZADOR SINTACTICO LEE SI TIENE SENTIDO. ADEMAS CABE DESTACAR QUE EL MISMO LENGUAJE SI O SI
TE PIDE:
    if (numero > 10) {...}
    1. IF
    2. ABRE PARENTESIS
    3. CONDICION
    4. CIERRA PARENTESIS
    5. ABRE CORCHETES
    6. EXPRESION
    7. CIERRA CORCHETES

SINO EL COMPILADOR TE DIRA ALGUN ERROR Y TE DIRA QUE ES LO QUE TIENES QUE HACER.

- FASE: GENERA CODIGO INTERMEDIO (DESPUES DEL IF, LA MAQUINA USA ESTE PARA ENTENDERLO MEJOR).
    ABSTRACT SYNTAX TREE (ARBOL SINTACTICO ABSTRACTO)
        5 + 2 + 4
              +
            5
          +
        2   4

- FASE: OPTIMIZACION DEL CODIGO INTERMEDIO(TRADUCCION DEL LENGUAJE HUMANO QUE ENTIENDE EL COMPILADOR: PUEDEN GENERAR
UN LENGUAJE MAS OPTIMO QUE EL QUE HALLAMOS ESCRITO Y ELIMINAR CODIGO REDUNDANTE).

for(i = 0; i <= 4; i++) {
    System.out.println("Valor actual: " + i); 0
    System.out.println("Valor actual: " + i); 1
    System.out.println("Valor actual: " + i); 2
    System.out.println("Valor actual: " + i); 3 
    System.out.println("Valor actual: " + i); 4
}

DESPUES DE UNROLL LOOP
    System.out.println("Valor actual: 0");
    System.out.println("Valor actual: 1");
    System.out.println("Valor actual: 2");
    System.out.println("Valor actual: 3");
    System.out.println("Valor actual: 4");

FASE: GENERACION DE CODIGO
    - CODIGO MAQUINA
    - CODIGO PARA SER INTERPRETADO

- TIPOS DE LENGUAJES COMPILADORES: 
C/C++/RUST/GOO////POR EXCELENCIA ASSAMBLER PERO DESDE LA MAQUINA.

LENGUAJE INTERPRETADOR:

SE EJECUTA ATRAVES DE UNA MAQUINA VIRTUAL (JVM= Java Virtual machine) O INTERPRETE Multiplataforma.
EJ. Java/Python/PHP

LENGUAJES INTERPRETADOS Y COMPILADOS:
C# -> MSIL (Microsoft Intermediate Languaje)
      -> Compilarlo (JIT -> Just-In-Time, JIT Compiler)

LENGUAJE COMPILADOR ES MAS RAPIDO QUE UN INTERPRETE.


